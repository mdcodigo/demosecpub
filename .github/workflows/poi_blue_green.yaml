name: POI CD

env:
  poi_path: apis/poi/**
  registry: openhackxqzxmauhbxtiiacr.azurecr.io
  repository: devopsoh/api-poi
  docker_path: apis/poi/web
  staging_url: https://openhackdevopsapp-poi-0x001-staging.azurewebsites.net
  prod_url: hhttps://openhackdevopsapp-poi-0x001.azurewebsites.net
  resource_group: rgOpenHackDevOps20
  webapp_name: openhackdevopsapp-poi-0x001
  build_name: POI
  ACR_URL: 'openhackxqzxmauhbxtiiacr.azurecr.io'
  
on:
  push:
    branches: [ master ]
    paths: 
      - apis/poi/**  
      #*** Only for dev pourpourses ;) ***
      - .github/workflows/poi_blue_green.yaml
#  pull_request:
#    branches: [ master ]
#    paths: 
#      - apis/poi/**
#      - .github/workflows/poi.yml

jobs:
#Job 1/
  docker_build_and_push:
     if: github.ref == 'refs/heads/master'
     runs-on: ubuntu-latest
     #needs: build

     steps:
     - uses: actions/checkout@v2

     - shell: bash
       name: Docker Login
       env:
         ACR_KEY: ${{ secrets.ACR_KEY }}
         DOCKER_USER: ${{ secrets.DOCKER_USER }}
         ACR: ${{ env.ACR_URL}}
       run: docker login "$ACR" -u "$DOCKER_USER" -p "$ACR_KEY"

#     - shell: bash
#       name: Docker Build
#       env:
#         ACR: ${{ env.ACR_URL}}
#       run: docker build -t "$ACR"/devopsoh/api-poi:${{github.run_number}} --build-arg build_version=${{github.run_number}} apis/poi/web

#     - shell: bash
#       name: Docker Push
#       env:
#         ACR: ${{ env.ACR_URL}}      
#       run: docker push "$ACR"/devopsoh/api-poi:${{github.run_number}}
       
     - name: Build and push Docker images
       # You may pin to the exact commit or the version.
       # uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
       uses: docker/build-push-action@v2.5.0
       with:
        # Build's context is the set of files located in the specified PATH or URL
        context: apis/poi/web # optional
        # Push is a shorthand for --output=type=registry
        push: true # optional, default is false
        tags: # optional
          ${{ env.ACR_URL}}/devopsoh/api-poi:${{github.run_number}}         
        # List of metadata for an image
        labels: # optional
#          ${{github.run_number}}
          latest
          staging          
        # List of extra privileged entitlement (eg. network.host,security.insecure)
        #allow: # optional
        # List of build-time variables
        #build-args: # optional
        # Builder instance
        #builder: # optional
        # List of external cache sources for buildx (eg. user/app:cache, type=local,src=path/to/dir)
        #cache-from: # optional
        # List of cache export destinations for buildx (eg. user/app:cache, type=local,dest=path/to/dir)
        #cache-to: # optional
        # Path to the Dockerfile
        #file: # optional
        # Load is a shorthand for --output=type=docker
        #load: # optional, default is false
        # Set the networking mode for the RUN instructions during build
        #network: # optional
        # Do not use cache when building the image
        #no-cache: # optional, default is false
        # List of output destinations (format: type=local,dest=path)
        #outputs: # optional
        # List of target platforms for build
        #platforms: # optional
        # Always attempt to pull a newer version of the image
        #pull: # optional, default is false
        # List of secrets to expose to the build (eg. key=string, GIT_AUTH_TOKEN=mytoken)
        #secrets: # optional
        # List of secret files to expose to the build (eg. key=filename, MY_SECRET=./secret.txt)
        #secret-files: # optional
        # List of SSH agent socket or keys to expose to the build
        #ssh: # optional
        # List of tags
        # Sets the target stage to build
        #target: # optional
        # GitHub Token used to authenticate against a repository for Git context
        #github-token: # optional, default is ${{ github.token }}
       
       
       
#Job 2/
  deploy_staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: docker_build_and_push

    steps:

    - name: Azure authentication
      uses: azure/login@v1
      with:
        #READ FIRST!
        #https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli
        #https://docs.microsoft.com/en-us/azure/app-service/deploy-container-github-action?tabs=service-principal#configure-the-github-secret-for-authentication
        #az ad sp create-for-rbac --name "sp_openhack_devops20_ghactions" --role contributor --scopes /subscriptions/<suscription id guid>/resourcegroups/<rg name> --sdk-auth
        creds: ${{ secrets.AZURE_CREDENTIALS  }}
        
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ${{ env.webapp_name }}
        slot-name: staging
        #images: openhackxqzxmauhbxtiiacr.azurecr.io/devopsoh/api-poi:7
        images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}} 

#Job 3/
#  validate_staging:
#    if: github.ref == 'refs/heads/master'
#    runs-on: ubuntu-latest
#    needs: deploy_staging
#    steps:
    
#    - name: Tag Validation Container
#      run: docker tag devopsoh/api-poi:7 openhackxqzxmauhbxtiiacr.azurecr.io/devopsoh/api-poi:staging-v7
# docker push openhackxqzxmauhbxtiiacr.azurecr.io/devopsoh/api-poi:staging-v7

    - name: Web Validate
      env:
       URL: ${{ env.staging_url }}
      #run: curl -s -w "%{http_code}" "$URL"/api/docs/poi ; if [ $? -lt "400" ]; then echo " 0K"; else exit 1; fi
      run: |
        sleep 15
        res=$(curl -s -w "%{http_code}" -o resp.txt "$URL"/api/healthcheck/poi); if [ $res -eq 200 ]; then echo "HTTP:"$res; else exit $res; fi
        cat resp.txt
        if grep -q "Healthy" resp.txt ; then echo "API POI Healthy"; else exit 2; fi

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Staging Web Test Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Staging Web Test Failed! ",
            body: body
          });
